from random import randint

import numpy as np

from function import show

CENTERS = []


def random_k_points(K):
    return sorted([randint(0, 255) for i in range(K)])


def assign_points(centers, d):
    assigned_centers = {i: [] for i in centers}
    for i in d:
        n = assigned_centers.keys()[0]
        for j in assigned_centers:
            if abs(j - i) < abs(n - i):
                n = j
        assigned_centers[n].append(i)
    return assigned_centers


def get_new_centers(assigned_centers, d):
    centers = []
    for c in assigned_centers:
        s = 0
        l = 0
        for i in assigned_centers[c]:
            s += d[i] * i
            l += d[i]
        if l:
            centers.append(s / l)
        else:
            centers.append(c)
    return centers


def findClusterCenters(images, K):
    # (a, b) = images.shape
    # images = [i[0] for i in images.reshape(a * b, 1).tolist()]
    # d = {}
    # for i in images:
    #    d[i] = d.get(i, 0) + 1
    d = {0: 36897, 1: 23651, 2: 41685, 3: 47705, 4: 48420, 5: 42347, 6: 52781, 7: 33005, 8: 63367, 9: 62934, 10: 60593,
         11: 53679, 12: 48953, 13: 54389, 14: 36912, 15: 58167, 16: 57078, 17: 51915, 18: 46182, 19: 40006, 20: 42027,
         21: 27239, 22: 46002, 23: 44070, 24: 40904, 25: 36086, 26: 31815, 27: 33236, 28: 19804, 29: 36571, 30: 35070,
         31: 34581, 32: 30829, 33: 30279, 34: 31713, 35: 18395, 36: 35689, 37: 34663, 38: 34876, 39: 28679, 40: 27901,
         41: 28326, 42: 12900, 43: 32866, 44: 31687, 45: 32034, 46: 30368, 47: 21378, 48: 26704, 49: 16351, 50: 29916,
         51: 29959, 52: 30758, 53: 31318, 54: 23141, 55: 28823, 56: 17467, 57: 33230, 58: 31778, 59: 33155, 60: 31844,
         61: 23590, 62: 29149, 63: 18553, 64: 26104, 65: 36289, 66: 35456, 67: 38193, 68: 34727, 69: 25196, 70: 18579,
         71: 34431, 72: 35164, 73: 33069, 74: 34339, 75: 31929, 76: 23785, 77: 19582, 78: 33720, 79: 34352, 80: 31361,
         81: 32608, 82: 30520, 83: 23385, 84: 20151, 85: 34225, 86: 33772, 87: 33332, 88: 31237, 89: 31890, 90: 30344,
         91: 22199, 92: 20416, 93: 32883, 94: 33021, 95: 31388, 96: 32032, 97: 28257, 98: 22493, 99: 18737, 100: 31813,
         101: 30370, 102: 28826, 103: 30112, 104: 26063, 105: 19883, 106: 16378, 107: 28294, 108: 27637, 109: 28249,
         110: 24708, 111: 22754, 112: 17663, 113: 17054, 114: 25837, 115: 24735, 116: 25009, 117: 23138, 118: 20840,
         119: 17072, 120: 15415, 121: 24200, 122: 22080, 123: 22242, 124: 19968, 125: 18232, 126: 14581, 127: 10047,
         128: 18252, 129: 19805, 130: 19212, 131: 17597, 132: 17870, 133: 13476, 134: 10061, 135: 18861, 136: 18248,
         137: 17420, 138: 16629, 139: 17270, 140: 12470, 141: 9397, 142: 17944, 143: 17230, 144: 16609, 145: 15634,
         146: 16550, 147: 12307, 148: 8496, 149: 14972, 150: 16088, 151: 14804, 152: 14810, 153: 12658, 154: 10690,
         155: 7405, 156: 13901, 157: 14215, 158: 13655, 159: 12211, 160: 12188, 161: 9243, 162: 6890, 163: 13098,
         164: 13057, 165: 12607, 166: 11792, 167: 11618, 168: 8793, 169: 6240, 170: 12382, 171: 12507, 172: 12380,
         173: 12299, 174: 11014, 175: 10720, 176: 8262, 177: 5743, 178: 11830, 179: 11657, 180: 11196, 181: 10575,
         182: 9755, 183: 7674, 184: 4916, 185: 11040, 186: 10922, 187: 10669, 188: 10605, 189: 9194, 190: 7531,
         191: 1943, 192: 10599, 193: 10579, 194: 10328, 195: 10346, 196: 9837, 197: 8243, 198: 2742, 199: 10095,
         200: 10098, 201: 9875, 202: 9616, 203: 8865, 204: 7539, 205: 2169, 206: 9254, 207: 8782, 208: 9053, 209: 8879,
         210: 8449, 211: 7026, 212: 1015, 213: 8594, 214: 8581, 215: 8649, 216: 8609, 217: 8515, 218: 7519, 219: 1005,
         220: 8394, 221: 8346, 222: 8695, 223: 8250, 224: 8622, 225: 7899, 226: 824, 227: 8696, 228: 8646, 229: 8762,
         230: 8672, 231: 8736, 232: 7977, 233: 838, 234: 8352, 235: 8849, 236: 8972, 237: 8991, 238: 9192, 239: 8737,
         240: 345, 241: 9066, 242: 9518, 243: 9616, 244: 9734, 245: 9888, 246: 10066, 247: 17, 248: 10250, 249: 10485,
         250: 10853, 251: 10973, 252: 11243, 253: 11653, 255: 2141564}

    centers = random_k_points(K)

    while 1:
        assigned_centers = assign_points(centers, d)
        new_centers = sorted(get_new_centers(assigned_centers, d))
        if new_centers == centers:
            break
        centers = new_centers

    return centers


def kmeansCompress(images, centers):
    def compress(x):
        return centers[(np.abs(np.array(centers) - x)).argmin()]

    f = np.vectorize(compress)
    return f(images)


def main():
    images = np.load('FaceImages.npy')
    centers = findClusterCenters(images, 2)

    images = images[:1]
    images = kmeansCompress(images, centers)

    for i in range(len(images)):
        show(images[i])


if __name__ == '__main__':
    main()
